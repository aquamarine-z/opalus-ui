{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "surface",
  "type": "registry:ui",
  "title": "Surface",
  "description": "Functions to open a surface over the current page. Like modal, drawer, etc.",
  "dependencies": [
    "@ebay/nice-modal-react"
  ],
  "registryDependencies": [
    "dialog",
    "input",
    "button"
  ],
  "files": [
    {
      "path": "registry/ui/surface.tsx",
      "content": "\"use client\";\r\nimport React, {type ReactNode} from \"react\";\r\nimport NiceModal, {useModal} from \"@ebay/nice-modal-react\";\r\nimport {Button} from \"@/components/ui/button.tsx\";\r\nimport {AlertCircle, XIcon} from \"lucide-react\";\r\nimport {Input} from \"@/components/ui/input.tsx\";\r\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\r\nimport {cn} from \"@/lib/utils\"\r\nimport {Dialog, DialogClose, DialogHeader, DialogPortal, DialogTitle} from \"@/components/ui/dialog.tsx\";\r\n\r\nfunction SurfaceDialogOverlay({\r\n                                  className,\r\n                                  closeWhenClick = true,\r\n                                  ...props\r\n                              }: React.ComponentProps<typeof DialogPrimitive.Overlay> & {\r\n    closeWhenClick?: boolean\r\n}) {\r\n    return (\r\n        <DialogPrimitive.Overlay\r\n            data-slot=\"dialog-overlay\"\r\n            className={cn(\r\n                \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\r\n                className\r\n            )}\r\n            onClick={closeWhenClick ? undefined : (e) => e.stopPropagation()}\r\n            onPointerDownCapture={closeWhenClick ? undefined : (e) => e.stopPropagation()}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nexport function SurfaceDialogContent({\r\n                                         className,\r\n                                         children,\r\n                                         showCloseButton = true,\r\n                                         closeOnClickOverlay = true,\r\n                                         ...props\r\n                                     }: React.ComponentProps<typeof DialogPrimitive.Content> & {\r\n    showCloseButton?: boolean,\r\n    closeOnClickOverlay?: boolean\r\n}) {\r\n    return (\r\n        <DialogPortal data-slot=\"dialog-portal\">\r\n            <SurfaceDialogOverlay closeWhenClick={closeOnClickOverlay}/>\r\n            <DialogPrimitive.Content\r\n                data-slot=\"dialog-content\"\r\n                className={cn(\r\n                    \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\r\n                    className\r\n                )}\r\n                {...props}\r\n            >\r\n                {children}\r\n                {showCloseButton && (\r\n                    <DialogPrimitive.Close\r\n                        data-slot=\"dialog-close\"\r\n                        className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\"\r\n                    >\r\n                        <XIcon/>\r\n                        <span className=\"sr-only\">Close</span>\r\n                    </DialogPrimitive.Close>\r\n                )}\r\n            </DialogPrimitive.Content>\r\n        </DialogPortal>\r\n    )\r\n}\r\n\r\ntype CustomSurfaceProps = {\r\n    content: (close: (result?: any) => Promise<void>) => ReactNode;\r\n    resolve?: (value: any) => void;\r\n};\r\nexport type CustomDialogOptions = {\r\n    modal?: boolean;\r\n}\r\nexport type DialogOptions = {\r\n    hasCloseButton?: boolean;\r\n    title?: ReactNode;\r\n    titleIcon?: ReactNode;\r\n    showTitleIcon?: boolean;\r\n    modal?: boolean;\r\n    closeOnCloseOverlay?: boolean;\r\n}\r\nexport type AlertDialogOptions = {\r\n    message?: ReactNode | ReactNode[];\r\n    closeButtonContent?: ReactNode;\r\n} & DialogOptions;\r\nexport type ConfirmDialogOptions = {\r\n    message?: ReactNode | ReactNode[];\r\n    confirmButtonContent?: ReactNode;\r\n    cancelButtonContent?: ReactNode;\r\n} & DialogOptions;\r\nexport type PromptDialogOptions = {\r\n    message?: ReactNode | ReactNode[];\r\n    defaultValue?: string;\r\n    placeholder?: string;\r\n    confirmButtonContent?: ReactNode;\r\n    cancelButtonContent?: ReactNode;\r\n} & DialogOptions;\r\n\r\nexport const dialog = {\r\n    custom: <T = any>(\r\n        content: (close: (result?: T) => Promise<void>) => React.ReactNode,\r\n        options?: CustomDialogOptions,\r\n    ): Promise<T | undefined> => {\r\n        const CustomModal = NiceModal.create(\r\n            ({\r\n                 content,\r\n                 resolve,\r\n             }: {\r\n                content: (close: (result?: T) => Promise<void>) => React.ReactNode;\r\n                resolve: (value?: T) => void;\r\n                modal?: boolean;\r\n            }) => {\r\n                const isModal = options?.modal ?? true;\r\n                const modalContext = useModal();\r\n                const handleClose = async (result?: any, isAuto: boolean = false) => {\r\n                    resolve?.(result);\r\n                    modalContext.hide();\r\n                };\r\n                const handleAnimationEnd = (e: React.AnimationEvent<HTMLDivElement>) => {\r\n                    const target = e.target as HTMLElement;\r\n                    if (target.dataset.state === \"closed\") {\r\n                        modalContext.remove();\r\n                    }\r\n                };\r\n                const wrappedContent = (() => {\r\n                    const node = content(handleClose);\r\n                    if (React.isValidElement(node)) {\r\n                        return React.cloneElement(\r\n                            node as React.ReactElement<any>,\r\n                            {\r\n                                onAnimationEnd: (e: React.AnimationEvent<HTMLDivElement>) => {\r\n                                    handleAnimationEnd(e);\r\n                                    (node.props as any)?.onAnimationEnd?.(e);\r\n                                },\r\n                            } as Partial<React.DOMAttributes<HTMLDivElement>>\r\n                        );\r\n                    }\r\n                    return node;\r\n                })();\r\n                return (\r\n                    <Dialog\r\n                        modal={isModal}\r\n                        open={modalContext.visible}\r\n                        onOpenChange={async (v) => {\r\n                            if (!v && modalContext.visible) {\r\n                                if (!isModal) return;\r\n                                await handleClose(undefined, true);\r\n                            }\r\n                        }}\r\n                    >\r\n                        {wrappedContent}\r\n                    </Dialog>\r\n                );\r\n            }\r\n        );\r\n        return new Promise(async (resolve) => {\r\n            await NiceModal.show(CustomModal, {\r\n                content,\r\n                resolve,\r\n            });\r\n        });\r\n    },\r\n    alert: (options: AlertDialogOptions) => {\r\n        return dialog.custom<null>(\r\n            (close,) => {\r\n                return <SurfaceDialogContent closeOnClickOverlay={options.closeOnCloseOverlay ?? true}\r\n                                             showCloseButton={options.hasCloseButton ?? true}>\r\n                    <DialogHeader>\r\n                        <DialogTitle className={\"flex flex-row items-center gap-2\"}>\r\n                            {(options.showTitleIcon ?? true) && (options.titleIcon ||\r\n                                <AlertCircle className={\"h-5 w-5\"}/>)}\r\n                            {options.title || \"Alert\"}\r\n                        </DialogTitle>\r\n                    </DialogHeader>\r\n                    <div className={\"flex flex-col gap-3 items-center\"}>\r\n                        <div>{options.message}</div>\r\n                        <DialogClose asChild onClick={() => close()}>\r\n                            {options.closeButtonContent || <Button variant={\"default\"}>Close</Button>}\r\n                        </DialogClose>\r\n                    </div>\r\n                </SurfaceDialogContent>\r\n            },\r\n            {modal: options.modal ?? true,}\r\n        )\r\n    },\r\n    confirm: (options: ConfirmDialogOptions) => {\r\n        return dialog.custom<boolean>((close) => {\r\n                return <SurfaceDialogContent closeOnClickOverlay={options.closeOnCloseOverlay ?? true}\r\n                                             showCloseButton={options.hasCloseButton ?? true}>\r\n                    <DialogHeader>\r\n                        <DialogTitle className={\"flex flex-row items-center gap-2\"}>\r\n                            {(options.showTitleIcon ?? true) && (options.titleIcon || <AlertCircle className={\"h-5 w-5\"}/>)}\r\n                            {options.title || \"Confirm\"}\r\n                        </DialogTitle>\r\n                    </DialogHeader>\r\n                    <div className={\"flex flex-col gap-3 items-center\"}>\r\n                        <div>{options.message}</div>\r\n                        <div className={\"flex flex-row gap-3\"}>\r\n                            <DialogClose asChild onClick={() => close(false)}>\r\n                                {options.cancelButtonContent || <Button variant={\"outline\"}>Cancel</Button>}\r\n                            </DialogClose>\r\n                            <DialogClose asChild onClick={() => close(true)}>\r\n                                {options.confirmButtonContent || <Button>Confirm</Button>}\r\n                            </DialogClose>\r\n                        </div>\r\n                    </div>\r\n                </SurfaceDialogContent>\r\n            },\r\n            {modal: options.modal ?? true,}\r\n        )\r\n    },\r\n    prompt: (options: PromptDialogOptions) => {\r\n        return dialog.custom<string | null>((close) => {\r\n                const [inputValue, setInputValue] = React.useState<string>(options.defaultValue || \"\");\r\n                return <SurfaceDialogContent closeOnClickOverlay={options.closeOnCloseOverlay ?? true}\r\n                                             showCloseButton={options.hasCloseButton ?? true}>\r\n                    <DialogHeader>\r\n                        <DialogTitle className={\"flex flex-row items-center gap-2\"}>\r\n                            {(options.showTitleIcon ?? true) && (options.titleIcon || <AlertCircle className={\"h-5 w-5\"}/>)}\r\n                            {options.title || \"Prompt\"}\r\n                        </DialogTitle>\r\n                    </DialogHeader>\r\n                    <div className={\"flex flex-col gap-3 items-center\"}>\r\n                        <div>{options.message}</div>\r\n                        <Input placeholder={options.placeholder} value={inputValue}\r\n                               onChange={e => setInputValue(e.target.value)}/>\r\n                        <DialogClose asChild onClick={() => close(inputValue)}>\r\n                            {options.confirmButtonContent || <Button>Confirm</Button>}\r\n                        </DialogClose>\r\n                    </div>\r\n                </SurfaceDialogContent>\r\n            },\r\n            {modal: options.modal ?? true,}\r\n        )\r\n    }\r\n}\r\nexport const surface = {}\r\nexport const drawer = {}",
      "type": "registry:ui"
    }
  ]
}